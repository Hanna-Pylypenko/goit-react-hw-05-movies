{"version":3,"file":"static/js/186.eea0cb6f.chunk.js","mappings":"2MAMMA,GAAUC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAoCrB,UAnCgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAEMC,GADWC,EAAAA,EAAAA,MAATC,KACaC,MAAM,cAAc,GAYzC,OAXAC,EAAAA,EAAAA,YAAU,WACQ,OAAZJ,GACFK,EAAAA,EAAAA,gBACmBL,GAChBM,MAAK,YAA4B,IAAjBC,EAAgB,EAAxBC,KAAQD,QACfR,EAAWQ,EACZ,IACAE,MAAMC,QAAQC,IAEpB,GAAE,CAACX,KAGF,SAAC,EAAAY,SAAD,CAAUC,SAAUC,EAAAA,QAAAA,QAApB,UACE,SAACnB,EAAD,CAASkB,SAAUC,EAAAA,QAAAA,SAAnB,SACGhB,EAAQiB,OAAS,EAChBjB,EAAQkB,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,GAE9B,OADAL,EAAAA,QAAAA,UAEE,2BACE,qCAAaG,MACb,uBAAIC,IAAa,MAFVC,EAKZ,KAED,uEAKT,C,2GCvCKC,EAAgB,4CAEhBC,EACM,mBADNA,EAEI,eAFJA,EAGW,SAHXA,EAIE,WAJFA,EAKK,WAEXC,IAAAA,SAAAA,QAViB,gCAWjB,IAAMC,EAAiB,mCAAG,6GAECD,IAAAA,IAAUD,EAAsBD,GAFjC,UAGE,OADlBI,EAFgB,QAGTC,OAHS,yCAIbD,GAJa,aAOhB,IAAIE,MAAMF,GAPM,yFAAH,qDAUjBG,EAAgB,mCAAG,WAAMC,GAAN,gGAEEN,IAAAA,IACrBD,EAAoBD,EAAgB,UAAYQ,GAH7B,UAMG,OAJlBJ,EAFe,QAMRC,OANQ,yCAOZD,GAPY,aAUf,IAAIE,MAAMF,GAVK,mHAAH,sDAehBK,EAAe,mCAAG,WAAM7B,GAAN,gGAEGsB,IAAAA,IACrBD,EAA2BrB,EAAUoB,GAHnB,UAMI,OAJlBI,EAFc,QAMPC,OANO,yCAOXD,GAPW,aAUd,IAAIE,MAAMF,GAVI,mHAAH,sDAefM,EAAY,mCAAG,WAAM9B,GAAN,gGAEMsB,IAAAA,IACrBD,EAA2BrB,EAAUqB,EAAkBD,GAHxC,UAMO,OAJlBI,EAFW,QAMJC,OANI,yCAORD,GAPQ,aASjBd,QAAQC,IAAIa,GACN,IAAIE,MAAMF,GAVC,sHAAH,sDAeZO,EAAe,mCAAG,WAAM/B,GAAN,gGAEGsB,IAAAA,IACrBD,EAA2BrB,EAAUqB,EAAqBD,GAHxC,UAKI,OAHlBI,EAFc,QAKPC,OALO,yCAMXD,GANW,aASd,IAAIE,MAAMF,GATI,mHAAH,sDAcRnB,EAAY,CACvBkB,kBAAAA,EACAI,iBAAAA,EACAE,gBAAAA,EACAC,aAAAA,EACAC,gBAAAA,EACAC,WApFiB,sC","sources":["components/Reviews/Reviews.jsx","services/moviesApi.jsx"],"sourcesContent":["import { useState, lazy, Suspense } from 'react';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { moviesApi } from 'services/moviesApi';\nimport { Loading } from 'notiflix';\n\nconst Section = lazy(() => import('components/Section/Section'));\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { slug } = useParams();\n  const movieId = slug.match(/[a-z0-9]+$/)[0];\n  useEffect(() => {\n    if (movieId !== null) {\n      moviesApi\n        .getMovieReviews(movieId)\n        .then(({ data: { results } }) => {\n          setReviews(results);\n        })\n        .catch(console.log);\n    }\n  }, [movieId]);\n\n  return (\n    <Suspense fallback={Loading.pulse()}>\n      <Section fallback={Loading.remove()}>\n        {reviews.length > 0 ? (\n          reviews.map(({ author, content, id }) => {\n            Loading.remove();\n            return (\n              <li key={id}>\n                <h3>Author: {author}</h3>\n                <p>{content}</p>{' '}\n              </li>\n            );\n          })\n        ) : (\n          <p>We don't have any reviews for this film.</p>\n        )}\n      </Section>\n    </Suspense>\n  );\n};\nexport default Reviews;\n","import axios from 'axios';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY_TEMPL = '?api_key=9bff41db57042f21e241625af111febf';\nconst POSTER_URL = 'https://image.tmdb.org/t/p/original';\nconst END_POINTS = {\n  TRENDING: 'trending/all/day',\n  SEARCH: 'search/movie',\n  MOVIE_DETAILS: 'movie/',\n  CAST: '/credits',\n  REVIEWS: '/reviews',\n};\naxios.defaults.baseURL = BASE_URL;\nconst getTrendingMovies = async () => {\n  try {\n    const response = await axios.get(END_POINTS.TRENDING + API_KEY_TEMPL);\n    if (response.status === 200) {\n      return response;\n    }\n\n    throw new Error(response);\n  } catch (error) {}\n};\nconst getSearchedMovie = async query => {\n  try {\n    const response = await axios.get(\n      END_POINTS.SEARCH + API_KEY_TEMPL + '&query=' + query\n    );\n\n    if (response.status === 200) {\n      return response;\n    }\n\n    throw new Error(response);\n  } catch (error) {\n    return;\n  }\n};\nconst getMovieDetails = async movieId => {\n  try {\n    const response = await axios.get(\n      END_POINTS.MOVIE_DETAILS + movieId + API_KEY_TEMPL\n    );\n\n    if (response.status === 200) {\n      return response;\n    }\n\n    throw new Error(response);\n  } catch (error) {\n    return;\n  }\n};\nconst getMovieCast = async movieId => {\n  try {\n    const response = await axios.get(\n      END_POINTS.MOVIE_DETAILS + movieId + END_POINTS.CAST + API_KEY_TEMPL\n    );\n\n    if (response.status === 200) {\n      return response;\n    }\n    console.log(response);\n    throw new Error(response);\n  } catch (error) {\n    return;\n  }\n};\nconst getMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      END_POINTS.MOVIE_DETAILS + movieId + END_POINTS.REVIEWS + API_KEY_TEMPL\n    );\n    if (response.status === 200) {\n      return response;\n    }\n\n    throw new Error(response);\n  } catch (error) {\n    return;\n  }\n};\nexport const moviesApi = {\n  getTrendingMovies,\n  getSearchedMovie,\n  getMovieDetails,\n  getMovieCast,\n  getMovieReviews,\n  POSTER_URL,\n};\n"],"names":["Section","lazy","useState","reviews","setReviews","movieId","useParams","slug","match","useEffect","moviesApi","then","results","data","catch","console","log","Suspense","fallback","Loading","length","map","author","content","id","API_KEY_TEMPL","END_POINTS","axios","getTrendingMovies","response","status","Error","getSearchedMovie","query","getMovieDetails","getMovieCast","getMovieReviews","POSTER_URL"],"sourceRoot":""}